<?xml version="1.0" encoding="UTF-8"?>

<project basedir="." name="service-clients-build">
	<description>
		Script for building service and clients
	</description>
	
	<!-- web resources -->
	<property name="tomcatPort" value="8080" />
	<property name="NEO4JURL" value="http://localhost:${tomcatPort}/Neo4JXML/rest" />
	<property name="URL" value="http://localhost:8080/NffgService/rest" />
	<property name="NEO4JWADL" value="${NEO4JURL}/application.wadl"/>
	<property name="NFFGWADL" value="${URL}/application.wadl"/>
	
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />
	<property name="debug" value="true" />
	<property name="debuglevel" value="source,lines,vars" />
	
	<!-- packages -->
	<property name="base.package" value="it.polito.dp2.NFFG.sol3" />
	<property name="service.package" value="${base.package}.service" />
	<property name="client1.package" value="${base.package}.client1" />
	<property name="client2.package" value="${base.package}.client2" />
	
	<!-- relative paths -->
	<property name="base.path" value="it/polito/dp2/NFFG/sol3" />
	<property name="service.path" value="${base.path}/service" />
	<property name="client1.path" value="${base.path}/client1" />
	<property name="client2.path" value="${base.path}/client2" />
	
	<!-- dir used for compiling, jaxb and artifacts generations-->
	<property name="src.dir" value="${basedir}/src" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="lib.dir" value="${basedir}/lib" />
	<property name="custom.dir" value="${basedir}/custom" />
	<property name="schema.dir" value="${basedir}/xsd" />
	<property name="client1.art.dir" value="${custom.dir}/${client1.path}" />
	<property name="client2.art.dir" value="${custom.dir}/${client2.path}" />
	
	<!-- The classpath to be used for compilation of the server -->
	<path id="server.classpath">
		<fileset dir="${lib.dir}">
		  <include name="**/*.jar" />
		 	<exclude name="lab1.jar"/>
		 	<exclude name="lab3.jar"/>
		 	<exclude name="NFFGRandom.jar"/> 
		</fileset>
	</path>
	
	<!-- The classpath to be used for compilation of the clients -->
		<path id="client.classpath">
			<pathelement location="${lib.dir}/NFFG.jar"/>
			<pathelement location="${lib.dir}/NFFGRandom.jar"/>
			<pathelement location="${lib.dir}/lab3.jar"/>
			<pathelement location="${lib.dir}/javax.ws.rs-api-2.0.1.jar"/>
			<pathelement location="${lib.dir}/jersey-client-1.19.1.jar"/>
			<pathelement location="${lib.dir}/jersey-core-1.19.1.jar"/>
		</path>
	
	<!-- Clean generated classes -->
		<target name="clean" description="Clean generated client files">
			<delete dir="${custom.dir}/it" />
		</target>
	
	<!-- Target generate-bindings -->
		<target name="generate-server-bindings" description="Generate bindings from schema">
			<exec executable="xjc" failonerror="true" >
				<arg value="-d" />
				<arg value="${custom.dir}" />
				<arg value="-p" />
				<arg value="${service.package}" />
				<arg value="${schema.dir}/nffgVerifier.xsd" />
			</exec>
		</target>
	
	
	<!-- define wjc task (WADL to Java) -->
	<taskdef name="wjc" classname="org.jvnet.ws.wadl2java.WJCTask">
	   <classpath>
	   	<fileset dir="${lib.dir}" includes="*.jar" />
	   </classpath>
	</taskdef>
	
	<!-- not used anymore becouse lib lab2 has those classes
	define the neo4j artifacts generation target
	<target name="generate-neo4j-artifacts">
				<mkdir dir="${basedir}/custom" />
			   	<echo message="Compiling the neo4j descriptions..." />
			   	<wjc description="${NEO4JWADL}" package="it.polito.dp2.NFFG.sol3.service.neo4j"
			       autoSchemaPackage="false" target="${basedir}/custom">
			     <customizations dir="${basedir}" includes="binding.xjc"/> 
			     <produces dir="${basedir}/custom/it/polito/dp2/NFFG/sol3/service/neo4j" includes="*.java"/>
			     <depends dir="${basedir}" includes="build.xml"/> 
			    </wjc>
			</target> -->
	
	<!-- define the client1 artifacts generation target -->
			<target name="generate-client1-artifacts" description="Generate client1 artifacts">
				<mkdir dir="${custom.dir}" />
							   	<echo message="Compiling the NffgService descriptions..." />
							   	<wjc description="${NFFGWADL}" package="${client1.package}"
							       autoSchemaPackage="false" target="${custom.dir}">
							     <customizations dir="${basedir}" includes="binding.xjc"/> 
							     <produces dir="${client1.art.dir}" includes="*.java"/>
							     <depends dir="${basedir}" includes="build.xml"/> 
							    </wjc>
							</target>
					
	
	<!-- define the client1 artifacts generation target -->
				<target name="generate-client2-artifacts" description="Generate client2 artifacts">
					<mkdir dir="${custom.dir}" />
						<echo message="Compiling the NffgService descriptions..." />
						<wjc description="${NFFGWADL}" package="${client2.package}"
							autoSchemaPackage="false" target="${custom.dir}">
							<customizations dir="${basedir}" includes="binding.xjc"/> 
							 <produces dir="${client2.art.dir}" includes="*.java"/>
							<depends dir="${basedir}" includes="build.xml"/> 
						</wjc>
				</target>
	
	<!-- Target build-service -->
		<target name="build-service" depends="generate-server-bindings" description="build the server">
			<echo>Building the submitted solution (if needed)...</echo>
			<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" includeantruntime="false">
				<src path="${src.dir}"/>
				<src path="${custom.dir}"/>
				<include name="${service.path}/**" />
				<classpath>
					<path refid="server.classpath" />
				</classpath>
			</javac>
			<echo>Done.</echo>
		</target>
	
	<!-- Target build-client -->
	<target name="build-client" depends="generate-client1-artifacts, generate-client2-artifacts" description="build the client">
		<echo>Building the submitted solution (if needed)...</echo>
				<javac destdir="${build.dir}" debug="${debug}" debuglevel="${debuglevel}" source="${source}" target="${target}" includeantruntime="false">
					<src path="${src.dir}"/>
					<src path="${custom.dir}"/>
					<include name="${client1.path}/**" />
					<include name="${client2.path}/**" />
					<classpath>
						<path refid="client.classpath" />
					</classpath>
				</javac>
				<echo>Done.</echo>
		</target>
	
	

</project>